<?php

require_once dirname(dirname(__FILE__)).'/base/OG_AE_campaign.php';
require_once 'OG_AE_adwords_base.php';
/*
 * Copyright OfferGrid Networks
 *   * 
 */

/**
 * Description of OG_AE_adwords_campaign
 *
 * @author shashank
 */
class OG_AE_adwords_campaign extends OG_AE_adwords_base implements OG_AE_campaign {
    
    private $campaign_id;
    private $capaign_data = array();
    
    public function __construct() {
        parent::__construct();
    }
    
    public function getCampaignId()
    {
        return $this->campaign_id;
    }
    
    public function setCampaignId($campaign_id)
    {
        return $this->campaign_id = $campaign_id;
    }
    
    public function getCampaign()
    {
        return $this->campaign;
    }
    
    public function setCampaign(OG_AE_campaign $capaign )
    {
        return $this->campaign = $capaign;
    }
    
   //----------------------------------------------------------------------------------------------- 
    public function createCampaign($campain_Name,$money_per_day) 
    {
        $user = $this->user;
        
        // Get the BudgetService, which loads the required classes.
        $budgetService = $user->GetService('BudgetService', ADWORDS_VERSION);

        // Create the shared budget (required).
        $budget = new Budget();
        $budget->name = $campain_Name . '_Budget #' . uniqid();
        $budget->period = 'DAILY';
        $budget->amount = new Money($money_per_day);
        $budget->deliveryMethod = 'STANDARD';

        $operations = array();

        // Create operation.
        $operation = new BudgetOperation();
        $operation->operand = $budget;
        $operation->operator = 'ADD';
        $operations[] = $operation;

        // Make the mutate request.
        $result = $budgetService->mutate($operations);
        $budget = $result->value[0];

        // Get the CampaignService, which loads the required classes.
        $campaignService = $user->GetService('CampaignService', ADWORDS_VERSION);

        
        $operations = array();
        
            // Create campaign.
            $campaign = new Campaign();
            $campaign->name = $campain_Name;
            $campaign->advertisingChannelType = 'SEARCH';

            // Set shared budget (required).
            $campaign->budget = new Budget();
            $campaign->budget->budgetId = $budget->budgetId;

            // Set bidding strategy (required).
            $biddingStrategyConfiguration = new BiddingStrategyConfiguration();
            $biddingStrategyConfiguration->biddingStrategyType = 'MANUAL_CPC';

            // You can optionally provide a bidding scheme in place of the type.
            $biddingScheme = new ManualCpcBiddingScheme();
            $biddingScheme->enhancedCpcEnabled = FALSE;
            $biddingStrategyConfiguration->biddingScheme = $biddingScheme;

            $campaign->biddingStrategyConfiguration = $biddingStrategyConfiguration;

            // Set keyword matching setting (required).
            $keywordMatchSetting = new KeywordMatchSetting();
            $keywordMatchSetting->optIn = TRUE;
            $campaign->settings[] = $keywordMatchSetting;

            // Set network targeting (optional).
            $networkSetting = new NetworkSetting();
            $networkSetting->targetGoogleSearch = TRUE;
            $networkSetting->targetSearchNetwork = TRUE;
            $networkSetting->targetContentNetwork = TRUE;
            $campaign->networkSetting = $networkSetting;

            // Set additional settings (optional).
            $campaign->status = 'ELIGIBLE';
            $campaign->startDate = date('Ymd', strtotime('+1 day'));
            $campaign->endDate = date('Ymd', strtotime('+1 month'));
            $campaign->adServingOptimizationStatus = 'ROTATE';

            // Set frequency cap (optional).
            $frequencyCap = new FrequencyCap();
            $frequencyCap->impressions = 3;
            $frequencyCap->timeUnit = 'DAY';
            $frequencyCap->level = 'ADGROUP';
            $campaign->frequencyCap = $frequencyCap;

            // Set advanced location targeting settings (optional).
            $geoTargetTypeSetting = new GeoTargetTypeSetting();
            $geoTargetTypeSetting->positiveGeoTargetType = 'DONT_CARE';
            $geoTargetTypeSetting->negativeGeoTargetType = 'DONT_CARE';
            $campaign->settings[] = $geoTargetTypeSetting;

            // Create operation.
            $operation = new CampaignOperation();
            $operation->operand = $campaign;
            $operation->operator = 'ADD';
            $operations[] = $operation;
        

// Make the mutate request.
        $result = $campaignService->mutate($operations);

        // Display results.

        foreach ($result->value as $campaign) {
           //printf("Campaign with name '%s' and ID '%s' was added.\n", $campaign->name, $campaign->id);
            $camp_id_name = array('id'=>$campaign->id,'name'=> $campaign->name);
        }



        return $camp_id_name;
    }
    //-----------------------------------------------------------------------------------------------  
    public function readCampaign() 
    {
        $user = $this->user;
        // Get the service, which loads the required classes.
        $campaignService = $user->GetService('CampaignService', ADWORDS_VERSION);

        // Create selector.
        $selector = new Selector();
        $selector->fields = array('Id', 'Name','Status','ServingStatus','Budget','FrequencyCap','NetworkSetting','Label','Setting');
        $selector->ordering[] = new OrderBy('Name', 'ASCENDING');

        // Create paging controls.
        $selector->paging = new Paging(0, AdWordsConstants::RECOMMENDED_PAGE_SIZE);

        
            // Make the get request.
            $page = $campaignService->get($selector);

            $campain_id_name = array();
            // Display results.
            if (isset($page->entries)) {
                foreach ($page->entries as $campaign) {
                    //printf("Campaign with name '%s' and ID '%s' was found.\n",
                    //   $campaign->name, $campaign->id);
                    $get_campaign_id_name[] = array('id'            => $campaign->id ,
                                                    'campain'       => $campaign->name,
                                                    'status'        => $campaign->status,
                                                    'servingStatus '=> $campaign->servingStatus,
                                                    'budget'        => $campaign->budget,
                                                    'frequencyCap'  => $campaign->frequencyCap,
                                                    'networkSetting' => $campaign->networkSetting,
                                                    'setting'       => $campaign->settings,
                                                    'lable'         => $campaign->labels
                                                    );
                }
            }else{
                $get_campaign_id_name = ' no campains';
            } 


            return $get_campaign_id_name;

            // Advance the paging index.
           
    }
 //----------------------------------------------------------------------------------------------- 
    public function changeStatusCampaign( $campaignId,$ELIGIBLE_or_PAUSED_or_REMOVED) 
    {
        // Get the service, which loads the required classes.
        $campaignService = $user->GetService('CampaignService', ADWORDS_VERSION);

        // Create campaign using an existing ID.
        $campaign = new Campaign();
        $campaign->id = $campaignId;
        $campaign->status = $ELIGIBLE_or_PAUSED_or_REMOVED;

        // Create operation.
        $operation = new CampaignOperation();
        $operation->operand = $campaign;
        $operation->operator = 'SET';

        $operations = array($operation);

        // Make the mutate request.
        $result = $campaignService->mutate($operations);

        // Display result.
        $campaign = $result->value[0];
        //printf("Campaign with ID '%s' was " . $ELIGIBLE_or_PAUSED . "\n", $campaign->id);
        return $campaign->status;
    }

    
 //----------------------------------------------------------------------------------------------- 
}
